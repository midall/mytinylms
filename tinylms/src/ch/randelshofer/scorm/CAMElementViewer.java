/*
 * @(#)CAMElementViewer.java  1.1  2006-10-10
 *
 * Copyright (c) 2003-2006 Werner Randelshofer
 * Hausmatt 10, Immensee, CH-6405, Switzerland.
 * All rights reserved.
 *
 * The copyright of this software is owned by Werner Randelshofer. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Werner Randelshofer. For details see accompanying license terms. 
 */

package ch.randelshofer.scorm;

import ch.randelshofer.scorm.cam.*;
import ch.randelshofer.gui.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.text.html.*;

/**
 * CAMElementViewer.
 *
 * @author  Werner Randelshofer
 * @version 1.1 2006-10-10 Got rid of HTMLEditorKit and use now StyledEditorKit.
 * Support multiple selection.
 * because of JavaSoft Bug http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4988885
 * <br>1.0 November 1, 2003 Created.
 */
public class CAMElementViewer extends javax.swing.JPanel implements ch.randelshofer.gui.Viewer {
    
    /** Creates new form CAMElementViewer */
    public CAMElementViewer() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        scrollPane = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        scrollPane.setViewportView(textPane);

        add(scrollPane, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    
    public java.awt.Component getComponent(java.awt.Component parent, Object value) {
        if (value instanceof Object[]) {
            StringBuffer buf = new StringBuffer();
            Object[] array = (Object[]) value;
            for (int i=0; i < array.length; i++) {
                AbstractElement element = (AbstractElement) array[i];
                if (buf.length() > 0) buf.append("\n\n");
                buf.append(element.getInfo());
            }
            textPane.setText(buf.toString());
        } else {
            AbstractElement element = (AbstractElement) value;
            textPane.setText(element.getInfo());
        }
        scrollPane.getViewport().setViewPosition(new Point(0,0));
        return this;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextPane textPane;
    // End of variables declaration//GEN-END:variables
    
}
