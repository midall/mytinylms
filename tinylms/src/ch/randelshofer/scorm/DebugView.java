/*
 * @(#)DebugView.java 1.1  2006-05-26
 *
 * Copyright (c) 2001-2006 Werner Randelshofer
 * Hausmatt 10, Immensee, CH-6405, Switzerland.
 * All rights reserved.
 *
 * The copyright of this software is owned by Werner Randelshofer. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Werner Randelshofer. For details see accompanying license terms. 
 */

package ch.randelshofer.scorm;

import java.beans.*;
import ch.randelshofer.gui.*;
import ch.randelshofer.util.*;
import java.awt.*;
import javax.swing.*;
import ch.randelshofer.scorm.cam.*;
/**
 * Debug view for TinyLMS.
 *
 * @author  Werner Randelshofer, Hausmatt 10, CH-6405 Immensee, Switzerland
 * @version 1.1 2006-05-26 Internationalized.
 * <br>1.0 2003-11-05 Created.
 */
public class DebugView extends JPanel implements PropertyChangeListener, Scrollable {
    private CourseModel model;
    private ResourceBundleUtil labels;
    
    /** Creates new form OptionsView */
    public DebugView() {
        labels = ResourceBundleUtil.getLAFBundle("ch.randelshofer.scorm.Labels");
        initComponents();
        Font f = Fonts.getEmphasizedDialogFont();
        loggingLabel.setFont(f);
        infoLabel.setFont(f);
        
        loggingInfoLabel.setText("<html>"+Fonts.smallDialogFontTag(
                labels.getString("debug.loggingInfo")
        
        ));
        infoButtonInfoLabel.setText("<html>"+Fonts.smallDialogFontTag(
                labels.getString("debug.infoButtonInfo")
        ));

     }
    
    public void setModel(CourseModel m) {
        CourseModel oldModel = model;
        if (oldModel != null) oldModel.removePropertyChangeListener(this);
        model = m;
        m.addPropertyChangeListener(this);
        propertyChange(null);
    }
    public CourseModel getModel() {
        return model;
    }
    
    public void setEnabled(boolean b) {
        super.setEnabled(b);
        Component[] c = getComponents();
        for (int i=0; i < c.length; i++) {
            c[i].setEnabled(b);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        debugGroup = new javax.swing.ButtonGroup();
        loggingLabel = new javax.swing.JLabel();
        logNothingRadioButton = new javax.swing.JRadioButton();
        logAPICallsRadioButton = new javax.swing.JRadioButton();
        logInternalsRadioButton = new javax.swing.JRadioButton();
        loggingInfoLabel = new javax.swing.JLabel();
        infoLabel = new javax.swing.JLabel();
        bugInfoButtonCheckBox = new javax.swing.JCheckBox();
        infoButtonInfoLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        loggingLabel.setText(labels.getString("debug.logging"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(loggingLabel, gridBagConstraints);

        debugGroup.add(logNothingRadioButton);
        logNothingRadioButton.setSelected(true);
        logNothingRadioButton.setText(labels.getString("debug.logNothing"));
        logNothingRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                loggingStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 24, 0, 0);
        add(logNothingRadioButton, gridBagConstraints);

        debugGroup.add(logAPICallsRadioButton);
        logAPICallsRadioButton.setText(labels.getString("debug.logAPI"));
        logAPICallsRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                loggingStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 24, 0, 0);
        add(logAPICallsRadioButton, gridBagConstraints);

        debugGroup.add(logInternalsRadioButton);
        logInternalsRadioButton.setText(labels.getString("debug.logInternals"));
        logInternalsRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                loggingStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 24, 0, 0);
        add(logInternalsRadioButton, gridBagConstraints);

        loggingInfoLabel.setText("loggingInfo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 24, 0, 0);
        add(loggingInfoLabel, gridBagConstraints);

        infoLabel.setText(labels.getString("debug.infoButton"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(24, 0, 0, 0);
        add(infoLabel, gridBagConstraints);

        bugInfoButtonCheckBox.setText(labels.getString("debug.displayInfoButton"));
        bugInfoButtonCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bugInfoChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 24, 0, 0);
        add(bugInfoButtonCheckBox, gridBagConstraints);

        infoButtonInfoLabel.setText("infoButtonInfo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 24, 0, 0);
        add(infoButtonInfoLabel, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void loggingStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_loggingStateChanged
        // TODO add your handling code here:
        if (model != null) {
        if (logNothingRadioButton.isSelected()) {
            model.setLogLevel(0);
        } else if (logAPICallsRadioButton.isSelected()) {
            model.setLogLevel(1);
        } if (logInternalsRadioButton.isSelected()) {
            model.setLogLevel(2);
        }
        }
    }//GEN-LAST:event_loggingStateChanged

    private void bugInfoChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bugInfoChanged
        // Add your handling code here:
        model.setBugInfoButton(bugInfoButtonCheckBox.isSelected());
    }//GEN-LAST:event_bugInfoChanged
            
    /** This method gets called when a bound property is changed.
     * @param evt A PropertyChangeEvent object describing the event source
     *   	and the property that has changed.
     *
     */
    public void propertyChange(PropertyChangeEvent evt) {
        if (model != null) {
            String name = (evt == null) ? null : evt.getPropertyName();
            if (name == null || name == "logLevel") {
            switch (model.getLogLevel()) {
                case 0 : logNothingRadioButton.setSelected(true); break;
                case 1 : logAPICallsRadioButton.setSelected(true); break;
                case 2 : logInternalsRadioButton.setSelected(true); break;
            }
            }
            if (name == null || name == "bugInfoButton") {
            bugInfoButtonCheckBox.setSelected(model.isBugInfoButton());
            }
        }
    }
    public java.awt.Dimension getPreferredScrollableViewportSize() {
        return getPreferredSize();
    }    
    
    public int getScrollableBlockIncrement(java.awt.Rectangle rectangle, int param, int param2) {
        return 10;
    }
    
    public boolean getScrollableTracksViewportHeight() {
        return false;
    }
    
    public boolean getScrollableTracksViewportWidth() {
        return true;
    }
    
    public int getScrollableUnitIncrement(java.awt.Rectangle rectangle, int param, int param2) {
        return 10;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox bugInfoButtonCheckBox;
    private javax.swing.ButtonGroup debugGroup;
    private javax.swing.JLabel infoButtonInfoLabel;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JRadioButton logAPICallsRadioButton;
    private javax.swing.JRadioButton logInternalsRadioButton;
    private javax.swing.JRadioButton logNothingRadioButton;
    private javax.swing.JLabel loggingInfoLabel;
    private javax.swing.JLabel loggingLabel;
    // End of variables declaration//GEN-END:variables
    
}
