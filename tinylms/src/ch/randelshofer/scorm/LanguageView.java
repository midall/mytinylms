/*
 * @(#)LanguageView.java  1.3  2006-06-12
 *
 * Copyright (c) 2003-2006 Werner Randelshofer
 * Hausmatt 10, Immensee, CH-6405, Switzerland.
 * http://www.randelshofer.ch
 * All rights reserved.
 *
 * The copyright of this software is owned by Werner Randelshofer. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Werner Randelshofer. For details see accompanying license terms. 
 */

package ch.randelshofer.scorm;

import ch.randelshofer.gui.*;
import ch.randelshofer.util.*;
import java.awt.*;
import java.beans.*;
import javax.swing.*;
import javax.swing.text.*;
import java.util.*;
/**
 * Language view for TinyLMS.
 *
 * @author Werner Randelshofer
 * @version 1.3 2006-06-12 Dutch locale added. 
 * <br>1.2 2006-05-26 Internationalized. 
 * <br>1.1 2006-05-17 Slovenian locale added. 
 * <br>1.0 August 22, 2003  Created.
 */
public class LanguageView extends javax.swing.JPanel 
implements PropertyChangeListener, Scrollable {
    private CourseModel model;
    private ResourceBundleUtil labels;
    
    /** Creates a new instance. */
    public LanguageView() {
        labels = ResourceBundleUtil.getLAFBundle("ch.randelshofer.scorm.Labels");
        initComponents();

        Font f = Fonts.getEmphasizedDialogFont();
        languageLabel.setFont(f);
        
        languageInfoLabel.setText("<html>"+Fonts.smallDialogFontTag(
                labels.getString("language.languageInfo")
        ));
        
        DefaultComboBoxModel cmb = new DefaultComboBoxModel(
        new Object[] {Locale.ENGLISH, Locale.GERMAN, new Locale("sl"), new Locale("nl")}
        );
        languageComboBox.setModel(cmb);
        
        ListCellRenderer renderer = new DefaultListCellRenderer() {
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Locale locale = (Locale) value;
                return super.getListCellRendererComponent(list, locale.getDisplayName(), index, isSelected, cellHasFocus);
            }
        };
        languageComboBox.setRenderer(renderer);
    }
    
    public void setModel(CourseModel m) {
        if (model != null) {
            model.removePropertyChangeListener(this);
        }
        model = m;
        if (model != null) {
            languageComboBox.setSelectedItem(model.getLocale());
            model.addPropertyChangeListener(this);
        }
    }
    public CourseModel getModel() {
        return model;
    }
    public void setEnabled(boolean b) {
        super.setEnabled(b);
        Component[] c = getComponents();
        for (int i=0; i < c.length; i++) {
            c[i].setEnabled(b);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        languageLabel = new javax.swing.JLabel();
        languageComboBox = new javax.swing.JComboBox();
        languageInfoLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        languageLabel.setText(labels.getString("language.language"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(languageLabel, gridBagConstraints);

        languageComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                languageChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 24, 0, 0);
        add(languageComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 24, 0, 0);
        add(languageInfoLabel, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void languageChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_languageChanged
        // Add your handling code here:
        model.setLocale((Locale) languageComboBox.getSelectedItem());
    }//GEN-LAST:event_languageChanged

    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals("locale")) {
            languageComboBox.setSelectedItem(evt.getNewValue());
        }
    }    
    public java.awt.Dimension getPreferredScrollableViewportSize() {
        return getPreferredSize();
    }    
    
    public int getScrollableBlockIncrement(java.awt.Rectangle rectangle, int param, int param2) {
        return 10;
    }
    
    public boolean getScrollableTracksViewportHeight() {
        return false;
    }
    
    public boolean getScrollableTracksViewportWidth() {
        return true;
    }
    
    public int getScrollableUnitIncrement(java.awt.Rectangle rectangle, int param, int param2) {
        return 10;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox languageComboBox;
    private javax.swing.JLabel languageInfoLabel;
    private javax.swing.JLabel languageLabel;
    // End of variables declaration//GEN-END:variables
    
}
